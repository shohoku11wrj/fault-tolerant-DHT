<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>edu.stevens.cs522.rest.patient</groupId>
	<artifactId>dht-standalone</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Standalone DHT application.</name>
	<description>Implements a DHT node as a standalone app, offering a RESTful API (via an embedded Grizzly Web server) and state managed via an RMI state server.</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- HTTP server listens on this port. -->
		<server.port.http>8080</server.port.http>

		<!-- RMI server listens on this port. -->
		<server.port.rmi>1099</server.port.rmi>

		<!-- External DNS for AWS. -->
		<server.external-dns>localhost</server.external-dns>

		<!-- Where to distribute jar files (using mvn package). -->
		<server.dist>${server.testdir}</server.dist>
		<server.name>dht</server.name>
		<user.home>/home/ranger</user.home>
	</properties>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<!-- Use this for "mvn exec:java" for testing -->
				<version>1.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mainClass>edu.stevens.cs549.dht.main.Main</mainClass>
					<!-- <arguments> <argument></argument> </arguments> -->
					<systemProperties>
						<systemProperty>
							<key>jersey.test.port</key>
							<value>${server.port.http}</value>
						</systemProperty>
					</systemProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<!-- Needed to merge create a self-contained jersey/grizzly jar file, 
					when there may be multiple implementations of a service, subject to runtime 
					mapping. -->
				<version>1.6</version>
				<configuration>
					<transformers>
						<transformer
							implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
							<manifestEntries>
								<Main-Class>edu.stevens.cs549.dht.main.Main</Main-Class>
								<Build-Number>1</Build-Number>
							</manifestEntries>
						</transformer>
						<transformer
							implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
					</transformers>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<delete file="${server.dist}/${server.name}.jar" />
								<copy
									file="${project.build.directory}/${project.build.finalName}.jar"
									tofile="${server.dist}/${server.name}.jar" />
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-grizzly2</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-grizzly2-servlet</artifactId>
			<version>1.12</version>
		</dependency>
		<!-- <dependency> <groupId>com.sun.jersey.contribs</groupId> <artifactId>jersey-simple-server</artifactId> 
			<version>1.12</version> </dependency> -->
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-json</artifactId>
			<version>1.12</version>
		</dependency>
		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-client</artifactId>
			<version>1.12</version>
		</dependency>
	</dependencies>

    <!--  
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>1.2.16</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	-->
	
		<profiles>
		<profile>
			<id>local</id>
			<!-- Use this profile for local testing of the server. -->
			<activation>
				<property>
					<name>local</name>
				</property>
			</activation>
			<properties>
				<server.host>localhost</server.host>
				<server.home>${user.home}</server.home>
				<!-- Test directory. -->
				<!-- If testing server on Windoze, this will have to be modified to ensure 
				the path does not contain spaces, otherwise RMI will barf during stack inspection. -->
				<server.testdir>${server.home}/tmp/cs549/dht-test</server.testdir>
				<!-- Path for files stored on server. -->
				<server.path>${server.testdir}/node</server.path>
				<!-- Server code base. -->
				<server.codebase>file:${server.testdir}/${server.name}.jar</server.codebase>
			</properties>
		</profile>
		<profile>
			<id>remote</id>
			<!-- Use this profile for remote testing of the server. -->
			<activation>
				<property>
					<name>remote</name>
				</property>
			</activation>
			<properties>
				<server.host>${server.external-dns}</server.host>
				<server.userid>ec2-user</server.userid>
				<server.home>/home/${server.userid}</server.home>
				<!-- Test directory. -->
				<server.testdir>${server.home}/tmp/cs549/dht-test</server.testdir>
				<!-- Path for files stored on server. -->
				<server.path>${server.testdir}/node</server.path>
				<!-- Server code base. -->
				<server.codebase>file:${server.testdir}/${server.name}.jar</server.codebase>
				<!-- 
				<server.codebase>http://${server.machine}/~${server.userid}/${server.name}.jar</server.codebase>
				-->
			</properties>
		</profile>
		<profile>
			<id>not-mac</id>
			<!-- On a non-Mac machine, make this activeByDefault to include tools.jar. -->
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>com.sun</groupId>
					<artifactId>tools</artifactId>
					<version>1.5</version>
					<scope>system</scope>
					<systemPath>${java.home}/../lib/tools.jar</systemPath>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
	
</project>